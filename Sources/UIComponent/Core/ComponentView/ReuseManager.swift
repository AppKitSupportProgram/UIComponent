//  Created by Luke Zhao on 2017-07-21.

#if canImport(AppKit) && !targetEnvironment(macCatalyst)
import AppKit
#endif

#if canImport(UIKit)
import UIKit
#endif

/// An enumeration that defines the reuse strategy for views.
/// - `automatic`: A key generated by the Type information is used to identify the view for reuse.
/// - `noReuse`: The view should not be reused.
/// - `key(String)`: A specific key is used to identify the view for reuse.
public enum ReuseStrategy: Equatable {
    /// A key generated by the Type information is used to identify the view for reuse.
    case automatic
    /// The view should not be reused.
    case noReuse
    /// A specific key is used to identify the view for reuse.
    case key(String)
}

public protocol ReuseableView: NSUIView {
    func prepareForReuse()
}

/// `ReuseManager` is a class that manages the reuse of `NSUIView` objects to improve performance.
/// It stores reusable views in a dictionary and provides methods to enqueue and dequeue these views.
/// It also handles the cleanup of views that are no longer needed.
open class ReuseManager: NSObject {
    /// Shared instance of `ReuseManager`.
    public static let shared = ReuseManager()

    /// The time interval after which the reusable views are cleaned up.
    public var lifeSpan: TimeInterval = 5.0

    /// A Boolean value that determines whether a view should be removed from its superview when it is enqueued for reuse.
    public var removeFromSuperviewWhenReuse = true

    /// A dictionary that maps identifiers to arrays of reusable `NSUIView` objects.
    var reusableViews: [String: [NSUIView]] = [:]
    /// An optional `Timer` that triggers the cleanup of reusable views.
    var cleanupTimer: Timer?

    /// Enqueues a `NSUIView` for reuse by adding it to the `reusableViews` dictionary.
    /// - Parameters:
    ///   - identifier: A string that uniquely identifies the type of the view.
    ///   - view: The `NSUIView` to be enqueued.
    public func enqueue<T: NSUIView>(identifier: String = NSStringFromClass(T.self), view: T) {
        view.ckContext.reuseIdentifier = nil
        view.ckContext.reuseManager = nil
        if removeFromSuperviewWhenReuse {
            view.removeFromSuperview()
        } else {
            view.isHidden = true
        }
        if reusableViews[identifier] != nil, !reusableViews[identifier]!.contains(view) {
            reusableViews[identifier]?.append(view)
        } else {
            reusableViews[identifier] = [view]
        }
        if let cleanupTimer {
            cleanupTimer.fireDate = Date().addingTimeInterval(lifeSpan)
        } else {
            cleanupTimer = Timer.scheduledTimer(
                timeInterval: lifeSpan,
                target: self,
                selector: #selector(cleanup),
                userInfo: nil,
                repeats: false
            )
        }
    }

    /// Dequeues a reusable `NSUIView` if available, or creates a new one using the provided closure.
    /// - Parameters:
    ///   - identifier: A string that uniquely identifies the type of the view.
    ///   - defaultView: A closure that creates a new instance of the view if no reusable view is available.
    /// - Returns: A `NSUIView` that is either dequeued from the reusable views or created anew.
    public func dequeue<T: NSUIView>(
        identifier: String = NSStringFromClass(T.self),
        _ defaultView: @autoclosure () -> T
    ) -> T {
        let queuedView = reusableViews[identifier]?.popLast() as? T
        let view = queuedView ?? defaultView()
        view._layer?.removeAllAnimations()
        (view as? ReuseableView)?.prepareForReuse()
        if !removeFromSuperviewWhenReuse {
            view.isHidden = false
        }
        view.ckContext.reuseManager = self
        view.ckContext.reuseIdentifier = identifier
        return view
    }

    /// Dequeues a reusable `NSUIView` if available, or creates a new one by initializing the provided type.
    /// - Parameters:
    ///   - identifier: A string that uniquely identifies the type of the view.
    ///   - type: The type of the view to be dequeued or created.
    /// - Returns: A `NSUIView` that is either dequeued from the reusable views or created anew.
    public func dequeue<T: NSUIView>(
        identifier: String = NSStringFromClass(T.self),
        type: T.Type
    ) -> T {
        return dequeue(identifier: identifier, type.init())
    }

    /// Cleans up all reusable views by removing them from their superview and clearing the `reusableViews` dictionary.
    @objc func cleanup() {
        for views in reusableViews.values {
            for view in views {
                view.removeFromSuperview()
            }
        }
        reusableViews.removeAll()
        cleanupTimer?.invalidate()
        cleanupTimer = nil
    }
}
